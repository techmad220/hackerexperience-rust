name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true

jobs:
  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

  # Build and test
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: heuser
          POSTGRES_PASSWORD: hepass
          POSTGRES_DB: hackerexperience_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli --no-default-features --features postgres

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run migrations
        run: |
          export DATABASE_URL=postgresql://heuser:hepass@localhost:5432/hackerexperience_test
          for file in migrations-postgres/*.sql; do
            psql $DATABASE_URL -f $file
          done

      - name: Run tests
        run: |
          export DATABASE_URL=postgresql://heuser:hepass@localhost:5432/hackerexperience_test
          export TEST_DATABASE_URL=$DATABASE_URL
          cargo test --all-features

      - name: Run database tests
        run: |
          export TEST_DATABASE_URL=postgresql://heuser:hepass@localhost:5432/hackerexperience_test
          cargo test -p he-database --all-features

      - name: Run core tests
        run: |
          cargo test -p he-core --all-features

      - name: Run API tests
        run: |
          export DATABASE_URL=postgresql://heuser:hepass@localhost:5432/hackerexperience_test
          cargo test -p he-api --all-features

      - name: Run integration tests
        run: |
          export DATABASE_URL=postgresql://heuser:hepass@localhost:5432/hackerexperience_test
          ./test_integration.sh || true

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Build Docker images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/hackerexperience-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/hackerexperience-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/hackerexperience-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/hackerexperience-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy monitoring stack
  deploy-monitoring:
    name: Deploy Monitoring Stack
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy monitoring to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/hackerexperience
            # Deploy monitoring stack
            if [ -f deploy_monitoring.sh ]; then
              ./deploy_monitoring.sh
            fi
            # Check monitoring services health
            sleep 10
            curl -f http://localhost:9090/-/healthy || echo "Prometheus not ready"
            curl -f http://localhost:3000/api/health || echo "Grafana not ready"

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, deploy-monitoring]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/hackerexperience
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker-compose exec -T backend /app/he-api migrate
            docker system prune -af

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'release'
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to production server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/hackerexperience

            # Backup database before deployment
            docker-compose exec -T postgres pg_dump -U heuser hackerexperience > backup_$(date +%Y%m%d_%H%M%S).sql

            # Pull new images
            docker-compose pull

            # Rolling update
            docker-compose up -d --no-deps --scale backend=2 backend
            sleep 10
            docker-compose up -d --no-deps backend
            docker-compose up -d --no-deps frontend

            # Run migrations
            docker-compose exec -T backend /app/he-api migrate

            # Health check
            curl -f http://localhost:3005/health || exit 1

            # Cleanup
            docker system prune -af

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Performance test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Run load tests
        run: |
          npm install -g @artillery/core
          artillery run tests/load-test.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: artillery-report.json